networks:
  default:
    name: microplate-network
    external: true
services:
  # Auth Service
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    container_name: microplate-auth-service
    restart: unless-stopped
    env_file:
      - ./services/auth-service/.env
    ports:
      - "6401:6401"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:6401/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Image Ingestion Service
  image-ingesion:
    build:
      context: ./services/image-ingesion-service
      dockerfile: Dockerfile
    container_name: microplate-image-ingesion-service
    restart: unless-stopped
    env_file:
      - ./services/image-ingesion-service/.env
    ports:
      - "6402:6402"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:6402/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Vision Inference Service (Python)
  vision-inference:
    build:
      context: ./services/vision-inference-service
      dockerfile: Dockerfile
    container_name: microplate-vision-inference-service
    restart: unless-stopped
    env_file:
      - ./services/vision-inference-service/.env
    ports:
      - "6403:6403"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:6403/api/v1/inference/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Result API Service (Node.js + Prisma)
  result-api:
    build:
      context: ./services/result-api-service
      dockerfile: Dockerfile
    container_name: microplate-result-api-service
    restart: unless-stopped
    env_file:
      - ./services/result-api-service/.env
    ports:
      - "6404:6404"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:6404/api/v1/results/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Labware Interface Service
  # labware-interface:
  #   build:
  #     context: ./services/labware-interface-service
  #     dockerfile: Dockerfile
  #   container_name: microplate-labware-interface-service
  #   restart: unless-stopped
  #   env_file:
  #     - ./services/labware-interface-service/.env
  #   ports:
  #     - "6405:6405"
  #   healthcheck:
  #     test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:6405/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 40s

  # Prediction DB Service (Node.js + Prisma)
  prediction-db:
    build:
      context: ./services/prediction-db-service
      dockerfile: Dockerfile
    container_name: microplate-prediction-db-service
    restart: unless-stopped
    env_file:
      - ./services/prediction-db-service/.env
    ports:
      - "6406:6406"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:6406/api/v1/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

