// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth"]
}

// =========================
// AUTH SCHEMA
// =========================

model User {
  id                    String   @id @default(uuid()) @db.Uuid
  email                 String   @unique
  username              String   @unique
  password              String
  firstName             String?
  lastName              String?
  isActive              Boolean  @default(true)
  emailVerified         Boolean  @default(false)
  lastLoginAt           DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relations
  roles                 UserRole[]
  refreshTokens         RefreshToken[]
  passwordResetTokens   PasswordResetToken[]
  auditLogs             AuditLog[]
  
  @@map("users")
  @@schema("auth")
}

model Role {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  permissions String[]  // Array of permission strings
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  users       UserRole[]
  
  @@map("roles")
  @@schema("auth")
}

model UserRole {
  userId    String @db.Uuid
  roleId    Int
  assignedAt DateTime @default(now())
  assignedBy String? @db.Uuid
  
  // Relations
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  @@id([userId, roleId])
  @@map("user_roles")
  @@schema("auth")
}

model RefreshToken {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @db.Uuid
  token        String   @unique
  family       String   // For token rotation
  deviceInfo   String?  // Device fingerprint
  ipAddress    String?
  userAgent    String?
  issuedAt     DateTime @default(now())
  expiresAt    DateTime
  revokedAt    DateTime?
  revokedBy    String?  @db.Uuid
  reused       Boolean  @default(false)
  
  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("refresh_tokens")
  @@schema("auth")
}

model PasswordResetToken {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  token     String   @unique
  expiresAt DateTime
  usedAt    DateTime?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("password_reset_tokens")
  @@schema("auth")
}


model AuditLog {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String?  @db.Uuid
  action      String   // LOGIN, LOGOUT, CREATE, UPDATE, DELETE, etc.
  resource    String?  // Table or resource name
  resourceId  String?  // ID of the affected resource
  details     Json?    // Additional details
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  
  // Relations
  user        User?    @relation(fields: [userId], references: [id])
  
  @@map("audit_logs")
  @@schema("auth")
}
